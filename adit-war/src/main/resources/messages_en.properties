application.notRegistered = Application {0} is not registered in ADIT.
application.insufficientPrivileges.write = Application {0} does not have sufficient write privileges.
application.insufficientPrivileges.read = Application {0} does not have sufficient read privileges.
application.insufficientPrivileges.forUser.write = Application {0} does not have sufficient (write) privileges for user {1}
application.insufficientPrivileges.forUser.read = Application {0} does not have sufficient (read) privileges for user {1}

service.error = Service Error

usertype.nonExistent = User type does not exist: {0}. Allowed user types are: {1}
user.nonExistent =  Person/Institution {0} has not subscribed for ADIT's ("Personal documents") services but they may join the service via https://www.eesti.ee/est/minu/dokumendid
user.inactive = Account deleted (inactive) for user {0}
document.nonExistent = Document with ID {0} does not exist.
document.doesNotBelongToUser = Document with ID {0} does not belong to user {1}.
document.deflated = Document is deflated. Deflation time {0}
document.deleted = Document with ID {0} is deleted.
document.notSignable = Document cannot be signed.
file.nonExistent = File with ID {0} does not exist.
file.isDeleted = File with ID {0} is already deleted.
file.doesNotBelongToDocument = File with ID {0} does not belong to document with ID {1}.
files.nonExistentOrDeleted = The following files do not exist or are deleted: {0}
documentWorkflowStatus.nonExistent = Document status {0} does not exist.

# Request
request.attachments.tooMany = There can only be one SOAP attachment for this request.
request.attachments.invalidFormat = Invalid SOAP attachment contents: check the SOAP attachment content XML.
request.attachments.missing = No SOAP attachment found.
request.attachments.invalidID = Unable to find request attachment with specified ID or attachment ID is missing.

# Request header checks
request.header.undefined.personalCode = Unable to process request - Personal code not defined.
request.header.undefined.systemName = Unable to process request - Application name not defined.
request.header.undefined.institution = Unable to process request - Institution code not defined.

# Request body checks
request.body.empty = Unable to process request - request body is empty.
request.body.undefined.usertype = Unable to process request - user type not defined.
request.body.undefined.username = Unable to process request - user name not defined.
request.body.undefined.documentId = Unable to process request - document ID not defined.
request.body.undefined.documentStatusId = Unable to process request - document status ID not defined.
request.body.undefined.fileId = Unable to process request - file ID not defined.
request.body.undefined.notifications = Unable to process request - notification data not defined.

# Join request specific messages
request.join.success.userModified = User information modified.
request.join.success.userAdded = User has been subscribed to service.
request.join.success.userReactivated = Subscription to service has been restored.

# GetJoined request specific messages
request.getJoined.maxResults.tooLarge = Specified maximum result size is too large (maximum {0})
request.getJoined.success = User list retrieved for {0} users.
request.getJoined.body.invalid.maxResults = Parameter 'maxResults' must be a positive integer.
request.getJoined.body.invalid.startIndex = Parameter 'startIndex' must be a positive integer or zero.
request.getJoined.noUsersFound = No users found.

# UnJoin request specific messages
request.unJoin.success = Service subscription is deactivated.
request.unJoin.alreadyUnJoined = User {0} subscription to service is already deactivated.

# GetUserInfo request specific messages
request.getUserInfo.success = User information successfully retrieved.

# GetUserContacts request specific messages
request.getUserContacts.success = User contact list retrieved for {0} users.
request.getUserContacts.noUsersFound = No user contacts found.

# GetNotifications request specific messages
request.getNotifications.success = User notifications were successfully retrieved.

# SetNotifications request specific messages
request.setNotifications.success = User notifications were successfully modified.
request.setNotifications.incorrectNotificationTypesProvided = Unable to modify user notifications. Unable to use the following notifications: {0}. Choose on of: {1}

# GetDocumentList request specific messages
request.getDocumentList.success = Document list was successfully retrieved.
request.getDocumentList.noDocumentsFound = No documents were found.
request.getDocumentList.incorrectFolderName = Incorrect folder name supplied. Folder name must be one of following: incoming, outgoing, local.

# GetDocument request specific messages
request.getDocument.success = Requested document was successfully retrieved.

# GetSendStatus request specific messages
request.getSendStatus.success = Requested statuses were successfully retrieved.
request.getSendStatus.attachment.id.notSpecified = Attachment ID not specified in request body.

# GetDocumentFile request specific messages
request.getDocumentFile.success = All requested files were successfully retrieved.

# SaveDocument request specific messages
request.saveDocument.success = Document was successfully saved.
request.saveDocument.document.guid.wrongFormat = Incorrect UUID/GUID format. The format should be XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
request.saveDocument.document.title.undefined = Document title must be defined.
request.saveDocument.document.type.undefined = Document type must be defined. Valid types: {0}
request.saveDocument.document.type.nonExistent = Wrong document type. Valid types: {0}
request.saveDocument.document.previousDocument.nonExistent = Previous document with ID {0} does not exist.
request.saveDocument.document.files.undefined = Document file list empty - at least one file must be defined.
request.saveDocument.document.files.quotaExceeded = Document files exceed the quota limit for this user. Remaining quota: {0} bytes, document size: {1} bytes.
request.saveDocument.document.locked = Unable to modify document because the document is locked. Locking time: {0}
request.saveDocument.document.deflated = Unable to modify document because the document is deflated. Deflation time: {0}
request.saveDocument.document.deleted = Unable to modify document because the document is deleted.
request.saveDocument.document.noDocumentsSupplied = Request did not contain any documents.
request.saveDocument.document.noFileToUpdate = Cannot update file with ID {0} in the document with ID {1} because the specified file does not exist.
request.saveDocument.attachment.id.notSpecified = Attachment ID not specified in request body.
request.saveDocument.testcertificate = Service Error (Test ID-card)
request.saveDocument.revokedcertificate = Service Error (Revoked ID-card)
request.saveDocument.unknowncertificate = Service Error (Unknown ID-card)

# SendDocument
request.sendDocument.success = Document sent.
request.sendDocument.fail = Document sending failed.
request.sendDocument.recipientStatus.alreadySentToUser = This document is already sent to user {0}.

# SaveDocumentFile request specific messages
request.saveDocumentFile.success = Document file was successfully saved.
request.saveDocumentFile.file.noFilesSupplied = Request did not contain any files.
request.saveDocumentFile.document.locked = Unable to add or modify file because the document is locked. Document ID: {0}

# DeleteDocument request specific messages
request.deleteDocument.success = Document was successfully deleted.
request.deleteDocuments.success = Documents were successfully deleted.
request.deleteDocuments.fail = Unable to delete documents.
request.deleteDocument.document.locked = Unable to delete document with ID {0} because the document is locked.
request.deleteDocument.document.deleted = Unable to delete document with ID {0} because the document is already deleted.

# DeflateDocument request specific messages
request.deflateDocument.success = Document was successfully deflated.

# DeleteDocumentFile request specific messages
request.deleteDocumentFile.success = File was successfully deleted.
request.deleteDocumentFile.document.locked = Unable to delete document file because the document with ID {0} is locked.
request.deleteDocumentFile.cannotDeleteSignatureContainer = Deleting digital signature containers is not permitted.

# PrepareSignature request specific messages
request.prepareSignature.success = Signature container was successfully created.
request.prepareSignature.missingCertificate = Signing failed. Signer certificate was not supplied.
request.prepareSignature.signer.notCurrentUser = Signing failed. Signer must be the same person who is currently logged in.
request.prepareSignature.signer.hasAlreadySigned = Signing failed. Document is already signed by current user.
request.prepareSignature.documentIsBeingSignedByAnotherUser = Signing failed. Another person is currently signing this document.
request.prepareSignature.documentIsBeingSignedByAnotherUser.withEstimate = Signing failed. Another person is currently signing this document. Document will be available for signing in {0} minutes and {1} seconds.
request.prepareSignature.documentIsBeingSignedByAnotherUser.withEstimateSecondsOnly = Signing failed. Another person is currently signing this document. Document will be available for signing in {0} seconds.

# ConfirmSignature request specific messages
request.confirmSignature.success = Signature was successfully added.
request.confirmSignature.missingCertificate = Signing failed. Signature file was not supplied.
request.confirmSignature.missingSignature = Signing failed. Signature does not exist.
request.confirmSignature.signatureNotPrepared = Signature confirmation failed. Document has no unconfirmed signatures.
request.confirmSignature.errorReadingSignatureFile = Signing failed. Processing signature file caused a technical error.

# ShareDocument request specific messages
request.shareDocument.success = Document was successfully shared.
request.shareDocument.recipientStatus.success = Document was successfully shared.
request.shareDocument.recipients.unspecified = Unable to share document. Recipients are unspecified.
request.shareDocument.recipients.noneSucceeded = Unable to share document. Could not share document to any of the specified recipients.
request.shareDocument.recipientStatus.recipient.nonExistant = Unable to share document. Recipient does not exist.
request.shareDocument.recipientStatus.recipient.inactive = Unable to share document. Recipient account is inactive (deleted).
request.shareDocument.recipientStatus.alreadySharedToUser = This document is already shared to user {0}
request.shareDocument.recipient.usesDVK = Recipient {0} uses the Document Exchange Center to exchange document. Cannot share documents to Document Exchange Center users.
request.shareDocument.fail = Unable to share document to some or all users.

# UnShareDocument request specific messages
request.unShareDocument.success = Document sharing was successfully canceled.
request.unShareDocument.recipientStatus.success = Document sharing was successfully canceled.
request.unShareDocument.fail = Not all document sharings were canceled.
request.unShareDocument.document.notShared = Unable to cancel document sharing because the specified document is not shared.
request.unShareDocument.recipientStatus.notShared = Unable to cancel document sharing because the specified document is not shared to this user.

# MarkDocumentViewed request specific messages
request.markDocumentViewed.success = Document {0} was marked as viewed by user {1}.

# ModifyStatus request specific messages
request.modifyStatus.success = Document status was successfully modified.

# GetDocumentHistory request specific messages
request.getDocumentHistory.success = Document history was successfully retrieved.


# Scheduler messages
scheduler.message.send = Document {0} was sent to you by user {1}.
scheduler.message.share = Document {0} was shared to you by user {1}.
scheduler.message.unShare = User {0} canceled sharing of document {1}.
scheduler.message.view = Document {0} was viewed by user {1}.
scheduler.message.modify = Document {0} was modified by user {1}.
scheduler.message.sign = Document {0} was signed by user {1}.

# DigiDoc extraction messages
digidoc.extract.invalidSignature = Saving DigiDoc file failed because an invalid signature was found. Invalid signature was given by: {0}
digidoc.extract.incorrectContainer = Saving DigiDoc file failed because the file has incorrect structure.
digidoc.extract.genericException = Saving DigiDoc file failed because of a technical error.
