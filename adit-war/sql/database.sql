/*  -------------------------------------------------- */
/*  Generated by Enterprise Architect Version 7.5.844*/
/*  Created On : Friday, June 04, 2010 */
/*  DBMS       : Oracle */
/*  -------------------------------------------------- */

/* Create Tables */
CREATE TABLE &&ADIT_SCHEMA..ACCESS_RESTRICTION
(
    ID                  NUMBER(18) NOT NULL,
    remote_application  VARCHAR2(50) NOT NULL,                 /* Short name of remote application that uses ADIT for datastore. */
    user_code           VARCHAR2(50) NOT NULL,                 /* Personal ID Code of user. */
    restriction         VARCHAR2(50)                           /* Type of restriction to be applied. "WRITE" - user/application cannot add, update or delete data; "READ" - user/application cannot read, add, update or delete any data. */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..ACCESS_RESTRICTION                      IS 'Access restrictions for user-application combination. Infos체steemidele saab m채채rata piiranguid kasutajate nimel tegevuste l채bi viimiseks rakenduses.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ACCESS_RESTRICTION.remote_application  IS 'Short name of remote application that uses ADIT for datastore.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ACCESS_RESTRICTION.user_code           IS 'Personal ID Code of user.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ACCESS_RESTRICTION.restriction         IS 'Type of restriction to be applied. "WRITE" - user/application cannot add, update or delete data; "READ" - user/application cannot read, add, update or delete any data.';

CREATE TABLE &&ADIT_SCHEMA..ADIT_LOG
(
    ID                             NUMBER(18) NOT NULL,
    table_name                     VARCHAR2(50),               /* Name of table in which data was modified */
    column_name                    VARCHAR2(50),               /* Name of column in which data was modified */
    old_value                      VARCHAR2(4000),             /* Old value */
    new_value                      VARCHAR2(4000),             /* New value */
    log_date                       DATE,                       /* Date and time the data was modified */
    primary_key_value              VARCHAR2(100),              /* Primary key value of changed record */
    remote_application_short_name  VARCHAR2(50),               /* Application that modified data */
    xtee_user_code                 VARCHAR2(50),               /* Personal ID code from X-Road request */
    xtee_institution_code          VARCHAR2(50),               /* Organization code from X-Road request */
    db_user                        VARCHAR2(50)                /* Database user name */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..ADIT_LOG                                 IS 'Contains log of all data changes in database (except FILE_DATA column in DOCUMENT_FILES table).';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.table_name                     IS 'Name of table in which data was modified';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.column_name                    IS 'Name of column in which data was modified';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.old_value                      IS 'Old value';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.new_value                      IS 'New value';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.log_date                       IS 'Date and time the data was modified';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.primary_key_value              IS 'Primary key value of changed record';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.remote_application_short_name  IS 'Application that modified data';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.xtee_user_code                 IS 'Personal ID code from X-Road request';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.xtee_institution_code          IS 'Organization code from X-Road request';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_LOG.db_user                        IS 'Database user name';

CREATE TABLE &&ADIT_SCHEMA..ADIT_USER
(
    user_code                   VARCHAR2(50) NOT NULL,         /* Users personal ID code or registry code including country prefix. For example "EE38407089945". */
    full_name                   VARCHAR2(255),                 /* Users full name */
    usertype                    VARCHAR2(50) NOT NULL,         /* Reference to user type */
    active                      NUMBER(1) DEFAULT 1,           /* Indicates wheather or not the user is active. "1" = active, "0" = inactive. */
    dvk_org_code                VARCHAR2(50),                  /* This column contains a value only if user uses DEC to send and receive documents. Contains registry code of usesrs DEC organization. */
    dvk_subdivision_short_name  VARCHAR2(50),                  /* This column contains a value only if user uses DEC to send and receive documents. Contains short name of users DEC subdivision. */
    dvk_occupation_short_name   VARCHAR2(50),                  /* This column contains a value only if user uses DEC to send and receive documents. Contains short name of users DEC occupation. */
    disk_quota                  NUMBER(18),                    /* User disk quota in bytes. Disk quota configured here overrides disk quota values configured on user type or application levels. */
    deactivation_date           DATE,                          /* Date and time when user account was deactivated */
    disk_quota_used             NUMBER(18,0) DEFAULT 0         /* Total disk space used by current user */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..ADIT_USER                              IS 'User account data. User account can belong to a person (identified by personal ID code) or to an organization (identified by registry code).';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.user_code                   IS 'Users personal ID code or registry code including country prefix. For example "EE38407089945".';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.full_name                   IS 'Users full name';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.usertype                    IS 'Reference to user type';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.active                      IS 'Indicates wheather or not the user is active. "1" = active, "0" = inactive.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.dvk_org_code                IS 'This column contains a value only if user uses DEC to send and receive documents. Contains registry code of usesrs DEC organization.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.dvk_subdivision_short_name  IS 'This column contains a value only if user uses DEC to send and receive documents. Contains short name of users DEC subdivision.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.dvk_occupation_short_name   IS 'This column contains a value only if user uses DEC to send and receive documents. Contains short name of users DEC occupation.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.disk_quota                  IS 'User disk quota in bytes. Disk quota configured here overrides disk quota values configured on user type or application levels.';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.deactivation_date           IS 'Date and time when user account was deactivated';
COMMENT ON COLUMN &&ADIT_SCHEMA..ADIT_USER.disk_quota_used             IS 'Total disk space used by current user';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT
(
    ID                      NUMBER(12) NOT NULL,        /* Unique identifier */
    guid                    VARCHAR2(50),               /* Documents globally unique identifier. If document was received from DEC then GUID comes from DEC. If document is created in ADIT then GUID will be generated by ADIT. */
    title                   VARCHAR2(355),              /* Document title */
    type                    VARCHAR2(50) NOT NULL,      /* Short name of document type */
    creator_code            VARCHAR2(50) NOT NULL,      /* Personal ID code or registry code of document creator */
    creator_name            VARCHAR2(255) NULL,         /* Document creators name (as it was when document was created) */
    creator_user_code       VARCHAR2(50) NULL,          /* Personal ID code of document creator (if document creator is an organization) */
    creator_user_name       VARCHAR2(255) NULL,         /* Name of the person who created this document (if document creator is an organization) */
    creation_date           DATE,                       /* Document creation date and time */
    remote_application      VARCHAR2(50),               /* Short name of application that was used to add this document */
    last_modified_date      DATE,                       /* Date and time of last modification */
    document_dvk_status_id  NUMBER(12),                 /* DEC status identifier if document is received or sent using DEC */
    dvk_id                  NUMBER(12),                 /* DEC identifier if document was received from DEC */
    document_wf_status_id   NUMBER(12),                 /* Document workflow status ID */
    parent_id               NUMBER(12),                 /* Original document ID. Is used to reference the original document if for example current document is a new version of existing document. */
    locked                  NUMBER(1) DEFAULT 0,        /* Indicates if this document is locked (cannot be modified). "1" = locked, "0" = not locked. */
    locking_date            DATE,                       /* Date and time of locking */
    signable                NUMBER(1) DEFAULT 0,        /* Indicates if this document can be signed. "1" = can be signed, "0" = cannot be signed. */
    deflated                NUMBER(1) DEFAULT 0,        /* Indicates if this document is deflated (file contents removed). "1" = deflated, "0" = not deflated. */
    deflate_date            DATE,                       /* Date and time of deflation */
    deleted                 NUMBER(1),                  /* Indicates if this document is deleted. "1" = deleted, "0" = not deleted. */
    invisible_to_owner      NUMBER(1,0) NULL,           /* Indicates if this document has been made invisible to its owner. Is used when document has been sent to someone else and owner wants to delete it from his/her own view. */
    signed                  NUMBER(1,0) NULL,           /* Indicates if this document has been signed. */
    migrated                NUMBER (1,0)               /* Indicates if this document has been migrated from state portal */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT                          IS 'Document data';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.ID                      IS 'Unique identifier';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.guid                    IS 'Documents globally unique identifier. If document was received from DEC then GUID comes from DEC. If document is created in ADIT then GUID will be generated by ADIT.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.title                   IS 'Document title';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.type                    IS 'Short name of document type';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.creator_code            IS 'Personal ID code or registry code of document creator';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.creator_name            IS 'Document creators name (as it was when document was created)';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.creator_user_code       IS 'Personal ID code of document creator (if document creator is an organization)';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.creator_user_name       IS 'Name of the person who created this document (if document creator is an organization)';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.creation_date           IS 'Document creation date and time';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.remote_application      IS 'Short name of application that was used to add this document';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.last_modified_date      IS 'Date and time of last modification';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.document_dvk_status_id  IS 'DEC status identifier if document is received or sent using DEC';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.dvk_id                  IS 'DEC identifier if document was received from DEC';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.document_wf_status_id   IS 'Document workflow status ID';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.parent_id               IS 'Original document ID. Is used to reference the original document if for example current document is a new version of existing document.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.locked                  IS 'Indicates if this document is locked (cannot be modified). "1" = locked, "0" = not locked.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.locking_date            IS 'Date and time of locking';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.signable                IS 'Indicates if this document can be signed. "1" = can be signed, "0" = cannot be signed.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.deflated                IS 'Indicates if this document is deflated (file contents removed). "1" = deflated, "0" = not deflated.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.deflate_date            IS 'Date and time of deflation';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.deleted                 IS 'Indicates if this document is deleted. "1" = deleted, "0" = not deleted.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.invisible_to_owner      IS 'Indicates if this document has been made invisible to its owner. Is used when document has been sent to someone else and owner wants to delete it from his/her own view.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.signed                  IS 'Indicates if this document has been signed.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT.migrated                IS 'Indicates if this document has been migrated from state portal';


CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_DVK_STATUS
(
    ID           NUMBER(12) NOT NULL,                   /* Unique identifier of DEC status */
    description  VARCHAR2(4000)                         /* Status description */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_DVK_STATUS IS 'Document DEC status list (same values as in DEC). There are following statuses: 100 = Not set, 101 = Sending, 102 = Sent, 103 = Canceled';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_DVK_STATUS.ID           IS 'Unique identifier of DEC status';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_DVK_STATUS.description  IS 'Status description';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_FILE
(
    ID                           NUMBER(12) NOT NULL,               /* Unique identifier */
    document_id                  NUMBER(12) NOT NULL,               /* ID of document this file belongs to */
    file_name                    VARCHAR2(355) NOT NULL,            /* File name */
    content_type                 VARCHAR2(255),                     /* MIME type of file */
    description                  VARCHAR2(4000),                    /* File description */
    file_data                    BLOB,                              /* File contents (binary data) */
    file_size_bytes              NUMBER(38),                        /* File size in bytes */
    deleted                      NUMBER(1) DEFAULT 0,               /* Indicates if this file is deleted (contents removed) */
    document_file_type_id        NUMBER(18) DEFAULT (1) NOT NULL,   /* File type ID */
    file_data_in_ddoc            NUMBER(1,0) NULL,                  /* Shows whether or not file contents should be aquired from signature container */
    ddoc_datafile_id             VARCHAR2(5) NULL,                  /* ID of corresponding DataFile in signature container */
    ddoc_datafile_start_offset   NUMBER(18) NULL,                   /* First character index of current file in corresponding signature container */
    ddoc_datafile_end_offset     NUMBER(18) NULL,                   /* Last character index of current file in corresponding signature container */
    last_modified_date           DATE                               /* Date and time of last modification */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_FILE                               IS 'Document files';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.ID                           IS 'Unique identifier';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.document_id                  IS 'ID of document this file belongs to';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.file_name                    IS 'File name';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.content_type                 IS 'MIME type of file';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.description                  IS 'File description';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.file_data                    IS 'File contents (binary data)';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.file_size_bytes              IS 'File size in bytes';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.deleted                      IS 'Indicates if this file is deleted (contents removed)';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.document_file_type_id        IS 'File type ID';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.file_data_in_ddoc            IS 'Shows whether or not file contents should be aquired from signature container';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.ddoc_datafile_id             IS 'ID of corresponding DataFile in signature container';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.ddoc_datafile_start_offset   IS 'First character index of current file in corresponding signature container';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.ddoc_datafile_end_offset     IS 'Last character index of current file in corresponding signature container';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE.last_modified_date           IS 'Date and time of last modification';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY
(
    ID                     NUMBER(12) NOT NULL,         /* Unique identifier */
    document_id            NUMBER(12) NOT NULL,         /* ID of related document */
    document_history_type  VARCHAR2(50),                /* Short name of history type */
    description            VARCHAR2(4000),              /* Detailed description of document history event */
    event_date             DATE,                        /* Date and time of history event */
    user_code              VARCHAR2(50),                /* Personal ID code or registry code of user who performed the action */
    user_name              VARCHAR2(255),               /* Name of user who performed the action (at the moment of perforing the action). */
    remote_application     VARCHAR2(50),                /* Short name of application that was used to perform the action */
    notification_status    VARCHAR2(50),                /* Notification sending status. If notification is not sent then "SAADA", if notification is sent then "SAADETUD". If no notification has to be sent then empty (NULL). */
    xtee_notification_id   VARCHAR2(50),                /* Notification ID from notification calendar (teavituskalender) X-Road database. This column has a value only if notification was successfully sent to notification calendar. */
    xtee_user_code         VARCHAR2(50),                /* Personal ID code of person who executed the X-Road request. It is intended to identify the person who performed the action if the action was performed under organization account. */
    xtee_user_name         VARCHAR2(255)                /* Personal ID code of person who executed the X-Road request (if it waspossible to find out the name) */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY                         IS 'Document history. History records will be created when some action is performed on a document.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.ID                     IS 'Unique identifier';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.document_id            IS 'ID of related document';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.document_history_type  IS 'Short name of history type';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.description            IS 'Detailed description of document history event';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.event_date             IS 'Date and time of history event';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.user_code              IS 'Personal ID code or registry code of user who performed the action';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.user_name              IS 'Name of user who performed the action (at the moment of perforing the action).';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.remote_application     IS 'Short name of application that was used to perform the action';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.notification_status    IS 'Notification sending status. If notification is not sent then "SAADA", if notification is sent then "SAADETUD". If no notification has to be sent then empty (NULL).';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.xtee_notification_id   IS 'Notification ID from notification calendar (teavituskalender) X-Road database. This column has a value only if notification was successfully sent to notification calendar.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.xtee_user_code         IS 'Personal ID code of person who executed the X-Road request. It is intended to identify the person who performed the action if the action was performed under organization account.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY.xtee_user_name         IS 'Personal ID code of person who executed the X-Road request (if it waspossible to find out the name)';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY_TYPE
(
    short_name   VARCHAR2(50) NOT NULL,                 /* Name of history event type. e.g. "esmane loomine" or "dokumendi muutmine". */
    description  VARCHAR2(4000)                         /* Description of history event type */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY_TYPE               IS 'History event types';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY_TYPE.short_name   IS 'Name of history event type. e.g. "esmane loomine" or "dokumendi muutmine".';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_HISTORY_TYPE.description  IS 'Description of history event type.';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING
(
    ID                NUMBER(12) NOT NULL,
    document_id       NUMBER(12) NOT NULL,         /* Reference to the document that was shared or sent */
    user_code         VARCHAR2(50) NOT NULL,       /* Referente to user (user code) to whom the document was shared or sent */
    user_name         VARCHAR2(255) NULL,          /* Name of the user (as it was at the moment of sharing) */
    sharing_type      VARCHAR2(50) NOT NULL,       /* Short name of sharing type */
    task_description  VARCHAR2(4000),              /* Purpose of sharing (what the other user should do with this document) */
    creation_date     DATE,                        /* Date and time of sharing */
    dvk_status_id     NUMBER(12),                  /* DEC status ID of document. Is used when document has been sent using DEC */
    wf_status_id      NUMBER(12),                  /* Workflow status ID. Is used for feedback from recipient to sender. */
    last_access_date  DATE,                        /* Date and time the document was last accessed by recipient. */
	deleted           NUMBER(1,0) NULL,            /* Document has been deleted by the user to whom it was sent. */
	dvk_folder		  VARCHAR2(1000)			   /* DVK dokumendi kausta nimi */	
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING                    IS 'Document sharing data';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.ID                IS 'Unique identifier';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.document_id       IS 'Reference to the document that was shared or sent';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.user_code         IS 'Referente to user (user code) to whom the document was shared or sent';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.user_name         IS 'Name of the user (as it was at the moment of sharing)';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.sharing_type      IS 'Short name of sharing type';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.task_description  IS 'Purpose of sharing (what the other user should do with this document)';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.creation_date     IS 'Date and time of sharing';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.dvk_status_id     IS 'DEC status ID of document. Is used when document has been sent using DEC';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.wf_status_id      IS 'Workflow status ID. Is used for feedback from recipient to sender.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.last_access_date  IS 'Date and time the document was last accessed by recipient.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.deleted           IS 'Document has been deleted by the user to whom it was sent.';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING.dvk_folder		IS 'DVK dokumendi kausta nimi';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING_TYPE
(
    short_name   VARCHAR2(50) NOT NULL,                    /* Short name of sharing type */
    description  VARCHAR2(4000)                            /* Description of sharing type */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING_TYPE               IS 'List of sharing types';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING_TYPE.short_name   IS 'Short name of sharing type';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_SHARING_TYPE.description  IS 'Description of sharing type';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_TYPE
(
    short_name   VARCHAR2(50) NOT NULL,                    /* Short name of document type */
    description  VARCHAR2(4000)                            /* Description of document type */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_TYPE               IS 'List of possible document types';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_TYPE.short_name   IS 'Short name of document type';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_TYPE.description  IS 'Description of document type';

CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_WF_STATUS
(
    ID           NUMBER(12) NOT NULL,                  /* Unique identifier of workflow status */
    description  VARCHAR2(4000),                       /* Description of workflow status */
    name         VARCHAR2(50)                          /* Name of workflow status */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOCUMENT_WF_STATUS               IS 'List of possible workflow statuses';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_WF_STATUS.ID           IS 'Unique identifier of workflow status';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_WF_STATUS.description  IS 'Description of workflow status';
COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_WF_STATUS.name         IS 'Name of workflow status';

CREATE TABLE &&ADIT_SCHEMA..DOWNLOAD_REQUEST_LOG
(
    ID                             NUMBER(18) NOT NULL,
    document_id                    NUMBER(12),
    document_file_id               NUMBER(12),
    request_date                   DATE,
    remote_application_short_name  VARCHAR2(50),
    user_code                      VARCHAR2(50),
    organization_code              VARCHAR2(50)
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..DOWNLOAD_REQUEST_LOG IS 'Log of file download requests. Log entries are added
here if one of following requests are executed: getDocument (if file contents were requested), getDocumentFile';

CREATE TABLE &&ADIT_SCHEMA..ERROR_LOG
(
    ID                             NUMBER(18) NOT NULL,
    document_id                    NUMBER(12),             /* ID of document that was requested or is elsehow related to failed request */
    error_date                     DATE,                   /* Date and time when the error occured */
    remote_application_short_name  VARCHAR2(50),           /* Short name of application that executed the request */
    user_code                      VARCHAR2(50),           /* Code of user who executed the request */
    action_name                    VARCHAR2(255),          /* Name of failed request */
    error_level                    VARCHAR2(50),           /* Error level (FATAL, ERROR, WARNING) */
    error_message                  VARCHAR2(4000)          /* Error message */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON COLUMN &&ADIT_SCHEMA..ERROR_LOG.document_id                    IS 'ID of document that was requested or is elsehow related to failed request';
COMMENT ON COLUMN &&ADIT_SCHEMA..ERROR_LOG.error_date                     IS 'Date and time when the error occured';
COMMENT ON COLUMN &&ADIT_SCHEMA..ERROR_LOG.remote_application_short_name  IS 'Short name of application that executed the request';
COMMENT ON COLUMN &&ADIT_SCHEMA..ERROR_LOG.user_code                      IS 'Code of user who executed the request';
COMMENT ON COLUMN &&ADIT_SCHEMA..ERROR_LOG.action_name                    IS 'Name of failed request';
COMMENT ON COLUMN &&ADIT_SCHEMA..ERROR_LOG.error_level                    IS 'Error level (FATAL, ERROR, WARNING)';
COMMENT ON COLUMN &&ADIT_SCHEMA..ERROR_LOG.error_message                  IS 'Error message';

CREATE TABLE &&ADIT_SCHEMA..METADATA_REQUEST_LOG
(
    ID                             NUMBER(18) NOT NULL,
    document_id                    NUMBER(12) NOT NULL,    /* ID of document that was viewed */
    request_date                   DATE,                   /* Date and time of request execution */
    remote_application_short_name  VARCHAR2(50),           /* Short name of application that executed the request */
    user_code                      VARCHAR2(50),           /* Code of person who executed the request */
    organization_code              VARCHAR2(50)            /* Code of organization that executed the request */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..METADATA_REQUEST_LOG                                 IS 'Log of requests that return only document metadata.
Execution of following requests is logged here: getDocumentList, getDocument';
COMMENT ON COLUMN &&ADIT_SCHEMA..METADATA_REQUEST_LOG.document_id                    IS 'ID of document that was viewed';
COMMENT ON COLUMN &&ADIT_SCHEMA..METADATA_REQUEST_LOG.request_date                   IS 'Date and time of request execution';
COMMENT ON COLUMN &&ADIT_SCHEMA..METADATA_REQUEST_LOG.remote_application_short_name  IS 'Short name of application that executed the request';
COMMENT ON COLUMN &&ADIT_SCHEMA..METADATA_REQUEST_LOG.user_code                      IS 'Code of person who executed the request';
COMMENT ON COLUMN &&ADIT_SCHEMA..METADATA_REQUEST_LOG.organization_code              IS 'Code of organization that executed the request';

CREATE TABLE &&ADIT_SCHEMA..NOTIFICATION_TYPE
(
    short_name   VARCHAR2(50) NOT NULL,                /* Short name of notification type */
    description  VARCHAR2(4000)                        /* Description of notification type */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..NOTIFICATION_TYPE               IS 'List of possible notification types';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION_TYPE.short_name   IS 'Short name of notification type';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION_TYPE.description  IS 'Description of notification type';

CREATE TABLE &&ADIT_SCHEMA..REMOTE_APPLICATION
(
    short_name         VARCHAR2(50) NOT NULL,        /* Short name of application */
    name               VARCHAR2(50),                 /* Full name of application */
    organization_code  VARCHAR2(50) NOT NULL,        /* Registry code of organization that is responsible for this application */
    can_read           NUMBER(1) DEFAULT 0,          /* Indicates whether or not this application is allowed to read data */
    can_write          NUMBER(1) DEFAULT 0           /* Indicates whether or not this application is allowed to modify data */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..REMOTE_APPLICATION                     IS 'List of possible applications (portals) that use this database';
COMMENT ON COLUMN &&ADIT_SCHEMA..REMOTE_APPLICATION.short_name         IS 'Short name of application';
COMMENT ON COLUMN &&ADIT_SCHEMA..REMOTE_APPLICATION.name               IS 'Full name of application';
COMMENT ON COLUMN &&ADIT_SCHEMA..REMOTE_APPLICATION.organization_code  IS 'Registry code of organization that is responsible for this application';
COMMENT ON COLUMN &&ADIT_SCHEMA..REMOTE_APPLICATION.can_read           IS 'Indicates whether or not this application is allowed to read data';
COMMENT ON COLUMN &&ADIT_SCHEMA..REMOTE_APPLICATION.can_write          IS 'Indicates whether or not this application is allowed to modify data';

CREATE TABLE &&ADIT_SCHEMA..REQUEST_LOG
(
    ID                             NUMBER(18) NOT NULL,
    request                        VARCHAR2(50),           /* Name of request (e.g. shareDocument) */
    document_id                    NUMBER(12),             /* ID of document that was involved in this request */
    request_date                   DATE,                   /* Date and time of request execution */
    remote_application_short_name  VARCHAR2(50),           /* Short name of application that executed this request */
    user_code                      VARCHAR2(50),           /* Code of person who executed this request */
    organization_code              VARCHAR2(50),           /* Code of organization that executed this request */
    additional_information         VARCHAR2(4000)          /* Additional information about request. For example - in case of "saveDocumentFile" request SOAP attachment ID will be added here. */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..REQUEST_LOG                                 IS 'Log of requests that are used to modify data.
This table contains log entries about following requests: saveDocument, saveDocumentFile, deleteDocumentFile, archieveDocument, deleteDocument, getDocumentHistory, sendDocument, shareDocument, unShareDocument, markDocumentViewed, prepareSignature, confirmSiganture, modifyStatus';
COMMENT ON COLUMN &&ADIT_SCHEMA..REQUEST_LOG.request                        IS 'Name of request (e.g. shareDocument)';
COMMENT ON COLUMN &&ADIT_SCHEMA..REQUEST_LOG.document_id                    IS 'ID of document that was involved in this request';
COMMENT ON COLUMN &&ADIT_SCHEMA..REQUEST_LOG.request_date                   IS 'Date and time of request execution';
COMMENT ON COLUMN &&ADIT_SCHEMA..REQUEST_LOG.remote_application_short_name  IS 'Short name of application that executed this request';
COMMENT ON COLUMN &&ADIT_SCHEMA..REQUEST_LOG.user_code                      IS 'Code of person who executed this request';
COMMENT ON COLUMN &&ADIT_SCHEMA..REQUEST_LOG.organization_code              IS 'Code of organization that executed this request';
COMMENT ON COLUMN &&ADIT_SCHEMA..REQUEST_LOG.additional_information         IS 'Additional information about request. For example - in case of "saveDocumentFile" request SOAP attachment ID will be added here.';

CREATE TABLE &&ADIT_SCHEMA..SIGNATURE
(
    ID              NUMBER(12) NOT NULL,             /* Unique identifier */
    user_code       VARCHAR2(50),                    /* Code of user who gave this signature */
    document_id     NUMBER(12) NOT NULL,             /* ID of document this signature belongs to */
    signer_role     VARCHAR2(200),                    /* Signers role */
    resolution      VARCHAR2(200),                   /* Signers resolution */
    country         VARCHAR2(100),                   /* Signature production place - country */
    county          VARCHAR2(100),                   /* Signature production place - state/county */
    city            VARCHAR2(100),                   /* Signature production place - town */
    post_index      VARCHAR2(50),                    /* Signature production place - post code */
    signer_code     VARCHAR2(20),                    /* Signers personal ID code */
    signer_name     VARCHAR2(255),                   /* Signers name */
    signing_date    DATE,                            /* Date and time of signing */
    user_name       VARCHAR2(255) NULL               /* Name of ADIT user who gave this signature */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..SIGNATURE                  IS 'Metadata of document signatures';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.ID              IS 'Unique identifier';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.user_code       IS 'Code of user who gave this signature';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.document_id     IS 'ID of document this signature belongs to';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.signer_role     IS 'Signers role';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.resolution      IS 'Signers resolution';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.country         IS 'Signature production place - country';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.county          IS 'Signature production place - state/county';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.city            IS 'Signature production place - town';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.post_index      IS 'Signature production place - post code';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.signer_code     IS 'Signers personal ID code';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.signer_name     IS 'Signers name';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.signing_date    IS 'Date and time of signing';
COMMENT ON COLUMN &&ADIT_SCHEMA..SIGNATURE.user_name       IS 'Name of ADIT user who gave this signature';

CREATE TABLE &&ADIT_SCHEMA..USER_NOTIFICATION
(
    user_code          VARCHAR2(50) NOT NULL,        /* Code of user who ordered this notification */
    notification_type  VARCHAR2(50) NOT NULL         /* Short name of notification type */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..USER_NOTIFICATION                     IS 'Data about notifications ordered by users. Ordered Notifications will be sent using state portals notification calendar service.';
COMMENT ON COLUMN &&ADIT_SCHEMA..USER_NOTIFICATION.user_code          IS 'Code of user who ordered this notification';
COMMENT ON COLUMN &&ADIT_SCHEMA..USER_NOTIFICATION.notification_type  IS 'Short name of notification type';

CREATE TABLE &&ADIT_SCHEMA..USERTYPE
(
    short_name   VARCHAR2(50) NOT NULL,              /* Short name of user type */
    description  VARCHAR2(4000),                     /* Description of user type */
    disk_quota   NUMBER(18)                          /* Default disk quota for this user type (can be overridden in user data) */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..USERTYPE               IS 'List of user types. There are three types of users: person, company and istitution';
COMMENT ON COLUMN &&ADIT_SCHEMA..USERTYPE.short_name   IS 'Short name of user type';
COMMENT ON COLUMN &&ADIT_SCHEMA..USERTYPE.description  IS 'Description of user type';
COMMENT ON COLUMN &&ADIT_SCHEMA..USERTYPE.disk_quota   IS 'Default disk quota for this user type (can be overridden in user data)';


CREATE TABLE &&ADIT_SCHEMA..NOTIFICATION
(
    ID                             NUMBER(18) NOT NULL,      /* Unique identifier of notification */
    user_code                      VARCHAR2(50),             /* Code of user the notification was sent to */
    document_id                    NUMBER(12) NOT NULL,      /* ID of document this notification concerns */
    event_date                     DATE,                     /* Date and time of event this notification concirns */
    notification_type              VARCHAR2(50) NOT NULL,    /* Short name of notification type */
    notification_text              VARCHAR2(4000),           /* Notification text */
    notification_id                NUMBER(12),               /* ID of this notification in state portals notification calendar */
    notification_sending_date      DATE                      /* Date and time this notification was sent to state portals notification calendar service */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..NOTIFICATION                               IS 'Notifications for notification calendar';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.ID                           IS 'Unique identifier of notification';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.user_code                    IS 'Code of user the notification was sent to';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.document_id                  IS 'ID of document this notification concerns';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.event_date                   IS 'Date and time of event this notification concirns';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.notification_type            IS 'Short name of notification type';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.notification_text            IS 'Notification text';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.notification_id              IS 'ID of this notification in state portals notification calendar';
COMMENT ON COLUMN &&ADIT_SCHEMA..NOTIFICATION.notification_sending_date    IS 'Date and time this notification was sent to state portals notification calendar service';


CREATE TABLE &&ADIT_SCHEMA..DOCUMENT_FILE_TYPE
(
    ID                  NUMBER(18) NOT NULL,
    DESCRIPTION         VARCHAR2(100) NOT NULL                /* Description of file type */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON COLUMN &&ADIT_SCHEMA..DOCUMENT_FILE_TYPE.description        IS 'Description of file type';

CREATE TABLE &&ADIT_SCHEMA..MAINTENANCE_JOB
(
    ID              NUMBER(12) NOT NULL,                /* Unique ID of job */
    NAME            VARCHAR2(100),                      /* Name of job */
    IS_RUNNING      NUMBER(1,0) DEFAULT (0) NOT NULL    /* Indicates if current job is already running */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..MAINTENANCE_JOB               IS 'List of maintenance jobs. Required for maintenance task synchronization between cluster nodes';
COMMENT ON COLUMN &&ADIT_SCHEMA..MAINTENANCE_JOB.ID           IS 'Unique ID of job';
COMMENT ON COLUMN &&ADIT_SCHEMA..MAINTENANCE_JOB.NAME         IS 'Name of job';
COMMENT ON COLUMN &&ADIT_SCHEMA..MAINTENANCE_JOB.IS_RUNNING   IS 'Indicates if current job is already running';

CREATE TABLE &&ADIT_SCHEMA..USER_CONTACT
(
    ID                NUMBER(12) NOT NULL,
    user_code           VARCHAR2(50) NOT NULL,         /* Reference to the user (user_code) who owns the contact book */
    contact_code        VARCHAR2(50) NOT NULL,         /* Reference to the user (user_code) whos contact data is shown in the contact book */
    last_used_date				 TIMESTAMP			   /* Date and time when given contacts has been used for sharing or sending documents */
) TABLESPACE &&ADIT_TABLE_TABLESPACE.;

COMMENT ON TABLE &&ADIT_SCHEMA..USER_CONTACT                    	IS 'User contact data';
COMMENT ON COLUMN &&ADIT_SCHEMA..USER_CONTACT.ID                	IS 'Unique identifier';
COMMENT ON COLUMN &&ADIT_SCHEMA..USER_CONTACT.user_code       		IS 'Reference to the user (user_code) who owns the contact book';
COMMENT ON COLUMN &&ADIT_SCHEMA..USER_CONTACT.contact_code         	IS 'Reference to the user (user_code) whos contact data is shown in the contact book';
COMMENT ON COLUMN &&ADIT_SCHEMA..USER_CONTACT.last_used_date        IS 'Date and time when given contacts has been used for sharing or sending documents';

/* Create Primary Key Constraints */
ALTER TABLE &&ADIT_SCHEMA..ACCESS_RESTRICTION ADD CONSTRAINT PK_ACCESS_RESTRICTIONS
    PRIMARY KEY (remote_application, user_code)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..ADIT_LOG ADD CONSTRAINT PK_ADIT_LOG
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..ADIT_USER ADD CONSTRAINT PK_USERS
    PRIMARY KEY (user_code)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT ADD CONSTRAINT PK_DOCUMENTS
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_DVK_STATUS ADD CONSTRAINT PK_DOCUMENT_DVK_STATUSES
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_FILE ADD CONSTRAINT PK_DOCUMENT_FILES
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY ADD CONSTRAINT PK_DOCUMENT_HISTORY
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY_TYPE ADD CONSTRAINT PK_DOCUMENT_HISTORY_TYPE
    PRIMARY KEY (short_name)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING ADD CONSTRAINT PK_DOCUMENT_SHARINGS
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING_TYPE ADD CONSTRAINT PK_DOCUMENT_SHARING_TYPES
    PRIMARY KEY (short_name)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_TYPE ADD CONSTRAINT PK_DOCUMENT_TYPES
    PRIMARY KEY (short_name)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_WF_STATUS ADD CONSTRAINT PK_DOCUMENT_WF_STATUSES
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..DOWNLOAD_REQUEST_LOG ADD CONSTRAINT PK_DOWNLOAD_REQUEST_LOG
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..ERROR_LOG ADD CONSTRAINT PK_ERROR_LOG
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..METADATA_REQUEST_LOG ADD CONSTRAINT PK_METADATA_REQUEST_LOG
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..NOTIFICATION_TYPE ADD CONSTRAINT PK_NOTIFICATION_TYPES
    PRIMARY KEY (short_name)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..REMOTE_APPLICATION ADD CONSTRAINT PK_REMOTE_APPLICATIONS
    PRIMARY KEY (short_name)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..REQUEST_LOG ADD CONSTRAINT PK_REQUEST_LOG
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..SIGNATURE ADD CONSTRAINT PK_SIGNATURE
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..USER_NOTIFICATION ADD CONSTRAINT PK_NOTIFICATIONS
    PRIMARY KEY (user_code, notification_type)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

ALTER TABLE &&ADIT_SCHEMA..USERTYPE ADD CONSTRAINT PK_USERTYPES
    PRIMARY KEY (short_name)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

 ALTER TABLE &&ADIT_SCHEMA..NOTIFICATION ADD CONSTRAINT PK_NOTIFICATION
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

 ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_FILE_TYPE ADD CONSTRAINT PK_DOCUMENT_FILE_TYPE
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

 ALTER TABLE &&ADIT_SCHEMA..MAINTENANCE_JOB ADD CONSTRAINT PK_MAINTENANCE_JOB
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;
 
 ALTER TABLE &&ADIT_SCHEMA..USER_CONTACT ADD CONSTRAINT PK_USER_CONTACTS
    PRIMARY KEY (ID)
 USING INDEX TABLESPACE &&ADIT_INDEX_TABLESPACE.;

/* Create Foreign Key Constraints */
ALTER TABLE &&ADIT_SCHEMA..ACCESS_RESTRICTION ADD CONSTRAINT remote_application_short_name
    FOREIGN KEY (remote_application) REFERENCES &&ADIT_SCHEMA..REMOTE_APPLICATION (short_name);

ALTER TABLE &&ADIT_SCHEMA..ACCESS_RESTRICTION ADD CONSTRAINT user_code
    FOREIGN KEY (user_code) REFERENCES &&ADIT_SCHEMA..ADIT_USER (user_code);

ALTER TABLE &&ADIT_SCHEMA..ADIT_USER ADD CONSTRAINT usertype_short_name
    FOREIGN KEY (usertype) REFERENCES &&ADIT_SCHEMA..USERTYPE (short_name);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT ADD CONSTRAINT document_dvk_status_id
    FOREIGN KEY (document_dvk_status_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT_DVK_STATUS (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT ADD CONSTRAINT document_type_short_name
    FOREIGN KEY (type) REFERENCES &&ADIT_SCHEMA..DOCUMENT_TYPE (short_name);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT ADD CONSTRAINT document_workflow_status_id
    FOREIGN KEY (document_wf_status_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT_WF_STATUS (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT ADD CONSTRAINT parent_document_id
    FOREIGN KEY (parent_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT ADD CONSTRAINT doc_remote_app_short_name
    FOREIGN KEY (remote_application) REFERENCES &&ADIT_SCHEMA..REMOTE_APPLICATION (short_name);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_FILE ADD CONSTRAINT document_id
    FOREIGN KEY (document_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_FILE ADD CONSTRAINT document_file_type_id
    FOREIGN KEY (document_file_type_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT_FILE_TYPE (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY ADD CONSTRAINT FK_DOCUMENT_HIST_DOCUMENT_HIST
    FOREIGN KEY (document_history_type) REFERENCES &&ADIT_SCHEMA..DOCUMENT_HISTORY_TYPE (short_name);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY ADD CONSTRAINT FK_DOCUMENT_HIST_REMOTE_APPLIC
    FOREIGN KEY (remote_application) REFERENCES &&ADIT_SCHEMA..REMOTE_APPLICATION (short_name);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY ADD CONSTRAINT FK_DOCUMENT_HISTORY_DOCUMENT
    FOREIGN KEY (document_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_HISTORY ADD CONSTRAINT history_user_code
    FOREIGN KEY (user_code) REFERENCES &&ADIT_SCHEMA..ADIT_USER (user_code);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING ADD CONSTRAINT sharing_document_id
    FOREIGN KEY (document_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING ADD CONSTRAINT dvk_status_id
    FOREIGN KEY (dvk_status_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT_DVK_STATUS (ID);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING ADD CONSTRAINT sharing_type_short_name
    FOREIGN KEY (sharing_type) REFERENCES &&ADIT_SCHEMA..DOCUMENT_SHARING_TYPE (short_name);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING ADD CONSTRAINT sharing_user_code
    FOREIGN KEY (user_code) REFERENCES &&ADIT_SCHEMA..ADIT_USER (user_code);

ALTER TABLE &&ADIT_SCHEMA..DOCUMENT_SHARING ADD CONSTRAINT wf_status_id
    FOREIGN KEY (wf_status_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT_WF_STATUS (ID);

ALTER TABLE &&ADIT_SCHEMA..SIGNATURE ADD CONSTRAINT FK_SIGNATURE_DOCUMENT
    FOREIGN KEY (document_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT (ID);

ALTER TABLE &&ADIT_SCHEMA..SIGNATURE ADD CONSTRAINT FK_SIGNATURE_USER
    FOREIGN KEY (user_code) REFERENCES &&ADIT_SCHEMA..ADIT_USER (user_code);

ALTER TABLE &&ADIT_SCHEMA..USER_NOTIFICATION ADD CONSTRAINT notification_type_short_name
    FOREIGN KEY (notification_type) REFERENCES &&ADIT_SCHEMA..NOTIFICATION_TYPE (short_name);

ALTER TABLE &&ADIT_SCHEMA..USER_NOTIFICATION ADD CONSTRAINT notification_user_code
    FOREIGN KEY (user_code) REFERENCES &&ADIT_SCHEMA..ADIT_USER (user_code);

ALTER TABLE &&ADIT_SCHEMA..NOTIFICATION ADD CONSTRAINT FK_NOTIFICATION_DOCUMENT
    FOREIGN KEY (document_id) REFERENCES &&ADIT_SCHEMA..DOCUMENT (ID);

ALTER TABLE &&ADIT_SCHEMA..NOTIFICATION ADD CONSTRAINT FK_NOTIFICATION_NOTIF_TYPE
    FOREIGN KEY (notification_type) REFERENCES &&ADIT_SCHEMA..NOTIFICATION_TYPE (short_name);
 
ALTER TABLE &&ADIT_SCHEMA..USER_CONTACT ADD CONSTRAINT FK_USER_CONTACT_USER
    FOREIGN KEY (user_code) REFERENCES &&ADIT_SCHEMA..ADIT_USER (user_code);
    
ALTER TABLE &&ADIT_SCHEMA..USER_CONTACT ADD CONSTRAINT FK_USER_CONTACT_CONTACT
    FOREIGN KEY (contact_code) REFERENCES &&ADIT_SCHEMA..ADIT_USER (user_code);
    
/* Create Triggers */
CREATE SEQUENCE &&ADIT_SCHEMA..ADIT_LOG_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER &&ADIT_SCHEMA..SET_ADIT_LOG_ID
BEFORE INSERT
ON &&ADIT_SCHEMA..ADIT_LOG
FOR EACH ROW
BEGIN
  SELECT &&ADIT_SCHEMA..ADIT_LOG_ID_SEQ.NEXTVAL
  INTO :NEW.ID
  FROM DUAL;
END;
/

CREATE SEQUENCE &&ADIT_SCHEMA..DOCUMENT_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..DOCUMENT_FILE_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..DOCUMENT_HISTORY_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..DOCUMENT_SHARING_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..DOWNLOAD_REQUEST_LOG_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..ERROR_LOG_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..METADATA_REQUEST_LOG_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..REQUEST_LOG_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..SIGNATURE_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..NOTIFICATION_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..ACCESS_RESTR_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE &&ADIT_SCHEMA..USER_CONTACT_ID_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

/* Create indexes */
/* All primary key indexes were created with primary key constraints */
CREATE INDEX &&ADIT_SCHEMA..access_restriction_app_idx ON &&ADIT_SCHEMA..access_restriction (remote_application) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..access_restriction_user_idx ON &&ADIT_SCHEMA..access_restriction (user_code) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..adit_user_active_idx ON &&ADIT_SCHEMA..adit_user (active) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..adit_user_usertype_idx ON &&ADIT_SCHEMA..adit_user (usertype) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_dvkstatus_idx ON &&ADIT_SCHEMA..document (document_dvk_status_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_documenttype_idx ON &&ADIT_SCHEMA..document (type) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_wfstatus_idx ON &&ADIT_SCHEMA..document (document_wf_status_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_parent_idx ON &&ADIT_SCHEMA..document (parent_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_app_idx ON &&ADIT_SCHEMA..document (remote_application) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_file_docid_idx ON &&ADIT_SCHEMA..document_file (document_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_history_type_idx ON &&ADIT_SCHEMA..document_history (document_history_type) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_history_app_idx ON &&ADIT_SCHEMA..document_history (remote_application) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_history_docid_idx ON &&ADIT_SCHEMA..document_history (document_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_history_user_idx ON &&ADIT_SCHEMA..document_history (user_code) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_history_search_idx ON &&ADIT_SCHEMA..document_history (document_id, user_code, document_history_type) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_sharing_docid_idx ON &&ADIT_SCHEMA..document_sharing (document_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_sharing_dvkstatus_idx ON &&ADIT_SCHEMA..document_sharing (dvk_status_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_sharing_type_idx ON &&ADIT_SCHEMA..document_sharing (sharing_type) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_sharing_user_idx ON &&ADIT_SCHEMA..document_sharing (user_code) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..document_sharing_wfstatus_idx ON &&ADIT_SCHEMA..document_sharing (wf_status_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..signature_docid_idx ON &&ADIT_SCHEMA..signature (document_id) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..signature_user_idx ON &&ADIT_SCHEMA..signature (user_code) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..user_notification_type_idx ON &&ADIT_SCHEMA..user_notification (notification_type) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..user_notification_user_idx ON &&ADIT_SCHEMA..user_notification (user_code) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
CREATE INDEX &&ADIT_SCHEMA..maintenance_job_search_idx ON &&ADIT_SCHEMA..maintenance_job (id, is_running) TABLESPACE &&ADIT_INDEX_TABLESPACE.;
/* End of indexes */

-- ADIT user must have execute rights for dbms_crypto package
grant execute on dbms_crypto to &&ADIT_SCHEMA;

-- Stored procedure for doing file deflation directly in database
create or replace
procedure &&ADIT_SCHEMA..REMOVE_SIGNED_FILE_CONTENTS(
    result_rc out sys_refcursor,
    document_id in number,
    file_id in number,
    ddoc_start_offset in number,
    ddoc_end_offset in number
)
as
item_count number(10,0) := 0;
begin
    select  count(*)
    into    item_count
    from    document_file
    where   document_file.id = REMOVE_SIGNED_FILE_CONTENTS.file_id;

    if (item_count > 0) then
            select  count(*)
            into    item_count
            from    document_file
            where   document_file.id = REMOVE_SIGNED_FILE_CONTENTS.file_id
                    and document_file.document_id = REMOVE_SIGNED_FILE_CONTENTS.document_id;

            if (item_count > 0) then
                select  count(*)
                into    item_count
                from    document_file
                where   document_file.id = REMOVE_SIGNED_FILE_CONTENTS.file_id
                        and nvl(document_file.deleted, 0) = 0;

                if (item_count > 0) then
                    select  count(*)
                    into    item_count
                    from    document_file
                    where   document_file.id = REMOVE_SIGNED_FILE_CONTENTS.file_id
                            and nvl(document_file.file_data_in_ddoc, 0) = 0;

                    if (item_count > 0) then
                        -- Calculate MD5 hash
                        update  document_file
                        set        file_data = dbms_crypto.hash(nvl(file_data, empty_blob()), 2),
                                ddoc_datafile_start_offset = REMOVE_SIGNED_FILE_CONTENTS.ddoc_start_offset,
                                ddoc_datafile_end_offset = REMOVE_SIGNED_FILE_CONTENTS.ddoc_end_offset,
                                file_data_in_ddoc = 1
                        where   id = REMOVE_SIGNED_FILE_CONTENTS.file_id;

                        open result_rc for
                        select  'ok' as result_code
                        from    dual;
                    else
                        open result_rc for
                        select  'file_data_already_moved' as result_code
                        from    dual;
                    end if;
                else
                    open result_rc for
                    select  'file_is_deleted' as result_code
                    from    dual;
                end if;
            else
                open result_rc for
                select  'file_does_not_belong_to_document' as result_code
                from    dual;
            end if;
    else
        open result_rc for
        select  'file_does_not_exist' as result_code
        from    dual;
    end if;
end;
/

-- Stored procedure for doing file deflation directly in database
create or replace
procedure &&ADIT_SCHEMA..DEFLATE_FILE(
    result_rc out sys_refcursor,
    document_id in number,
    file_id in number,
    mark_deleted in number,
    fail_if_signature in number
)
as
item_count number(10,0) := 0;
begin
    select  count(*)
    into    item_count
    from    document_file
    where   document_file.id = file_id;

    if (item_count > 0) then
            select  count(*)
            into    item_count
            from    document_file
            where   document_file.id = DEFLATE_FILE.file_id
                    and document_file.document_id = DEFLATE_FILE.document_id;

            if (item_count > 0) then
                select  count(*)
                into    item_count
                from    document_file
                where   document_file.id = DEFLATE_FILE.file_id
                        and nvl(document_file.deleted, 0) = 0;

                if (item_count > 0) then
                    select  count(*)
                    into    item_count
                    from    document_file
                    where   document_file.id = DEFLATE_FILE.file_id
                            and nvl(document_file.document_file_type_id, 1) > 1;

                    if ((item_count = 0) or (DEFLATE_FILE.fail_if_signature <> 1)) then
                        -- Calculate MD5 hash
                        update    document_file
                        set        file_data = dbms_crypto.hash(nvl(file_data, empty_blob()), 2),
                                deleted = (case when DEFLATE_FILE.mark_deleted = 1 then 1 else document_file.deleted end)
                        where   id = DEFLATE_FILE.file_id;

                        open result_rc for
                        select  'ok' as result_code
                        from    dual;
                    else
                        open result_rc for
                        select  'cannot_delete_signature_container' as result_code
                        from    dual;
                    end if;
                else
                    open result_rc for
                    select  'already_deleted' as result_code
                    from    dual;
                end if;
            else
                open result_rc for
                select  'file_does_not_belong_to_document' as result_code
                from    dual;
            end if;
    else
        open result_rc for
        select  'file_does_not_exist' as result_code
        from    dual;
    end if;
end;
/

-- Stored procedure for setting job running status as fast as possible
create or replace
procedure &&ADIT_SCHEMA..SET_JOB_RUNNING_STATUS(
    result_rc out sys_refcursor,
    job_id in number,
    is_running in number
)
as
item_count number(10,0) := 0;
begin
    update  maintenance_job
    set     is_running = SET_JOB_RUNNING_STATUS.is_running
    where   id = SET_JOB_RUNNING_STATUS.job_id
            and is_running <> SET_JOB_RUNNING_STATUS.is_running;

    if (SQL%ROWCOUNT > 0) then
        open result_rc for
        select  'ok' as result_code
        from    dual;
    else
        open result_rc for
        select  'job_is_aready_in_given_state' as result_code
        from    dual;
    end if;
end;
/
